<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>RestartAction</key>
	<string>RequireRestart</string>
	<key>_metadata</key>
	<dict>
		<key>created_by</key>
		<string>aysiu</string>
		<key>creation_date</key>
		<date>2019-03-13T21:21:13Z</date>
		<key>munki_version</key>
		<string>3.6.0.3721</string>
		<key>os_version</key>
		<string>10.14.3</string>
	</dict>
	<key>autoremove</key>
	<false/>
	<key>catalogs</key>
	<array>
		<string>testing</string>
	</array>
	<key>category</key>
	<string>Scripts</string>
	<key>description</key>
	<string>Checks to see if the existing firmware password is the old (undesired one), and then updates to the new (desired) 
  firmware password.</string>
	<key>developer</key>
	<string>aysiu</string>
	<key>display_name</key>
	<string>Update Firmware Password</string>
	<key>installcheck_script</key>
	<string>#!/bin/bash

# Note: this Munki item stores both old and new firmware passwords in plain text, so make sure your Munki repo is 
# password-protected at the very least, and definitely remove this item from your repo once the firmware password change
# is done. This is really a proof-of-concept (so I could play around with embedding an expect script in a bash script).
# I wouldn't recommend using this in production. Better to use your MDM or
# https://github.com/univ-of-utah-marriott-library-apple/firmware_password_manager to update your firmware passwords

/usr/bin/expect &lt;&lt;'EOD'
set oldpass "OLDPASSWORDYOUWANTTOCHANGE"

spawn /usr/sbin/firmwarepasswd -verify
expect { 
	"Enter password:" { 
		send "$oldpass\r" 
		log_file -noappend firmwarepwtest.log
		exp_continue 
	}
}
EOD

incorrect=$(/bin/cat firmwarepwtest.log | /usr/bin/grep "Incorrect")

# If the old password is correct, then it's not installed
if [[ -z "$incorrect" ]]; then

	/bin/echo "Not installed"
	exit 0

# Otherwise, if the old password is incorrect, then it is installed
# Could be that the old password has already been changed to the new password, but even if it's not the new password,
# we can't really change it to something else if we don't know what the password is now... we can change it only if the
# old password is what we think it is
else

	/bin/echo "Installed"
	exit 1

fi

# Either way, delete the log file
/bin/rm firmwarepwtest.log</string>
	<key>installer_type</key>
	<string>nopkg</string>
	<key>minimum_os_version</key>
	<string>10.4.0</string>
	<key>name</key>
	<string>UpdateFirmwarePassword</string>
	<key>postinstall_script</key>
	<string>#!/usr/bin/expect 
set oldpass "OLDPASSWORDYOUWANTTOCHANGE"
set newpass "NEWPASSWORDYOUWANTTOCHANGETO" 

spawn /usr/sbin/firmwarepasswd -setpasswd 
expect { 
"Enter password:" { 
  send "$oldpass\r" 
   exp_continue 
} 
"Enter new password:" { 
   send "$newpass\r" 
   exp_continue } 

"Re-enter new password:" { 
  send "$newpass\r" 
exp_continue } 
}</string>
	<key>unattended_install</key>
	<false/>
	<key>version</key>
	<string>1.0</string>
</dict>
</plist>
